name: build-and-test-deb

on:
  push:
    branches: [ main ]
    tags:    [ 'v*' ]
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install build deps
        run: |
          sudo apt-get update
          sudo apt-get install -y libgdal-dev libboost-date-time-dev gdal-bin
          sudo apt-get install -y libomp-dev

      - name: Configure & Build
        run: |
          cmake -B build -DCMAKE_BUILD_TYPE=Release
          cmake --build build -j"$(nproc)"

      - name: Package (.deb via CPack)
        run: |
          cpack -B build/dist -G DEB --config build/CPackConfig.cmake
          ls -l build/dist

      - name: Upload .deb artifact
        uses: actions/upload-artifact@v4
        with:
          name: opendsas-deb
          path: build/dist/*.deb

  test-install:
    needs: build
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        image: [ "ubuntu:22.04", "ubuntu:24.04" ]
    steps:
      - name: Download .deb
        uses: actions/download-artifact@v4
        with:
          name: opendsas-deb
          path: dist

      - name: Show downloaded files
        run: ls -lah dist

      - name: Test install inside clean ${{ matrix.image }}
        run: |
          docker run --rm -v "$PWD/dist:/pkg:ro" "${{ matrix.image }}" bash -lc '
            set -euo pipefail
            export DEBIAN_FRONTEND=noninteractive
            apt-get update
            # Install the .deb; apt will pull runtime deps from the distro repos
            apt-get install -y /pkg/*.deb
            # Quick smoke tests
            command -v dsas
            dsas --version
            dsas --help >/dev/null
            ldd "$(command -v dsas)"
          '

  release:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [build, test-install]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: opendsas-deb
          path: dist
      - uses: softprops/action-gh-release@v2
        with:
          files: dist/*.deb
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
